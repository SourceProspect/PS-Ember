"use strict"
define("reddit/app",["exports","reddit/resolver","ember-load-initializers","reddit/config/environment"],function(e,t,r,n){Object.defineProperty(e,"__esModule",{value:!0})
var i=Ember.Application.extend({modulePrefix:n.default.modulePrefix,podModulePrefix:n.default.podModulePrefix,Resolver:t.default});(0,r.default)(i,n.default.modulePrefix),e.default=i}),define("reddit/components/ui-layout",["exports","ember-redux","reddit/reducers/posts"],function(e,t,r){Object.defineProperty(e,"__esModule",{value:!0})
var n=function(e){return console.log("\n\n\n stateToComputed",{state:e}),{posts:(0,r.filterPosts)(e),filter:e.posts.filter,registration:e.posts.registration,users:e.posts.users,loggedInUser:e.posts.loggedInUser}},i=function(e){return{filterWith:function(t){return e({type:"POSTS:FILTER_POSTS",author:t})},registrationAction:function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n]
return e({type:"POSTS:REGISTRATION",args:r})},registrationNewAction:function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n]
return e({type:"POSTS:REGISTRATION_NEW",args:r})},registrationLogInAction:function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n]
return e({type:"POSTS:LOGIN",args:r})},creatProfile:function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n]
return e({type:"POSTS:CREATE",args:r})}}}
e.default=(0,t.connect)(n,i)()}),define("reddit/enhancers/index",["exports","ember-redux/enhancers/index"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})}),define("reddit/helpers/app-version",["exports","reddit/config/environment","ember-cli-app-version/utils/regexp"],function(e,t,r){function n(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}
return t.hideSha?i.match(r.versionRegExp)[0]:t.hideVersion?i.match(r.shaRegExp)[0]:i}Object.defineProperty(e,"__esModule",{value:!0}),e.appVersion=n
var i=t.default.APP.version
e.default=Ember.Helper.helper(n)}),define("reddit/helpers/is-equal",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=Ember.Helper.helper(function(e){return e[0]===e[1]})}),define("reddit/helpers/pluralize",["exports","ember-inflector/lib/helpers/pluralize"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=t.default}),define("reddit/helpers/singularize",["exports","ember-inflector/lib/helpers/singularize"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=t.default}),define("reddit/initializers/app-version",["exports","ember-cli-app-version/initializer-factory","reddit/config/environment"],function(e,t,r){Object.defineProperty(e,"__esModule",{value:!0})
var n=void 0,i=void 0
r.default.APP&&(n=r.default.APP.name,i=r.default.APP.version),e.default={name:"App Version",initialize:(0,t.default)(n,i)}}),define("reddit/initializers/container-debug-adapter",["exports","ember-resolver/resolvers/classic/container-debug-adapter"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"container-debug-adapter",initialize:function(){var e=arguments[1]||arguments[0]
e.register("container-debug-adapter:main",t.default),e.inject("container-debug-adapter:main","namespace","application:main")}}}),define("reddit/initializers/data-adapter",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"data-adapter",before:"store",initialize:function(){}}}),define("reddit/initializers/ember-data",["exports","ember-data/setup-container","ember-data"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"ember-data",initialize:t.default}}),define("reddit/initializers/export-application-global",["exports","reddit/config/environment"],function(e,t){function r(){var e=arguments[1]||arguments[0]
if(!1!==t.default.exportApplicationGlobal){var r
if("undefined"!=typeof window)r=window
else if("undefined"!=typeof global)r=global
else{if("undefined"==typeof self)return
r=self}var n,i=t.default.exportApplicationGlobal
n="string"==typeof i?i:Ember.String.classify(t.default.modulePrefix),r[n]||(r[n]=e,e.reopen({willDestroy:function(){this._super.apply(this,arguments),delete r[n]}}))}}Object.defineProperty(e,"__esModule",{value:!0}),e.initialize=r,e.default={name:"export-application-global",initialize:r}}),define("reddit/initializers/injectStore",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"injectStore",before:"store",initialize:function(){}}}),define("reddit/initializers/store",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"store",after:"ember-data",initialize:function(){}}}),define("reddit/initializers/transforms",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"transforms",before:"store",initialize:function(){}}}),define("reddit/instance-initializers/ember-data",["exports","ember-data/instance-initializers/initialize-store-service"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"ember-data",initialize:t.default}}),define("reddit/middleware/index",["exports","redux-thunk"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=[t.default]}),define("reddit/reducers/index",["exports","redux","reddit/reducers/posts"],function(e,t,r){Object.defineProperty(e,"__esModule",{value:!0}),e.default=(0,t.combineReducers)({posts:r.default})}),define("reddit/reducers/posts",["exports","lodash","reselect"],function(e,t,r){function n(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t]
return r}return Array.from(e)}function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,r){switch(r.type){case"POSTS:FETCH_API":console.log("\n\n\n POSTS:FETCH_API",{state:e},{action:r},{initialState:s})
var a=r.payload.data.children.map(function(e){return e.data}),l=t.default.keyBy(a,function(e){return e.id})
return o({},e,{all:o({},e.all,l)})
case"POSTS:FILTER_POSTS":return e.filter===r.author?o({},e,{filter:void 0}):o({},e,{filter:r.author})
case"POSTS:REGISTRATION":console.log("\n\n\n POSTS:REGISTRATION",{state:e},{action:r},{initialState:s})
var d=e.registration,u=r.args[0],f=u.target.id,c=u.target.value,p=o({},e,{filter:r.author},{registration:o({},d,i({},f,c))})
return console.log("\n\n\n POSTS:REGISTRATION",{retState:p},{action:r},{initialState:s}),p
case"POSTS:REGISTRATION_NEW":console.log("\n\n\n POSTS:REGISTRATION_NEW",{state:e},{action:r},{initialState:s})
var m=e.registration,g=e.users,b=o({},e,{filter:r.author},{users:[].concat(n(g),[m])},{registration:{}})
return console.log("\n\n\n POSTS:REGISTRATION_NEW",{retState:b},{action:r},{initialState:s}),b
case"POSTS:LOGIN":console.log("\n\n\n POSTS:LOGIN",{state:e},{action:r},{initialState:s})
var v=e.registration,P=e.users,h=e.loggedInUser,S=v.UserName,y=v.Password,O=P.filter(function(e){return e.UserName===S}).filter(function(e){return e.Password===y}),_=(P.filter(function(e){return e.UserName!==h.UserName}),o({},e,{filter:r.author},O.length&&{loggedInUser:{UserName:S}},{registration:o({},v,{FirstName:O[0].FirstName})}))
return console.log("\n\n\n POSTS:LOGIN",{retState:_},{action:r},{initialState:s}),_
case"POSTS:CREATE":console.log("\n\n\n POSTS:CREATE",{state:e},{action:r},{initialState:s})
var x=(e.registration,e.users),N=e.loggedInUser,T=x.filter(function(e){return e.UserName===N.UserName}),j=x.filter(function(e){return e.UserName!==N.UserName})
console.log("\n\n\n match",{match:T}),console.log("\n\n\n nonMatch",{nonMatch:j})
var A=o({},e,{filter:r.author},{users:[].concat(n(j),[o({},T[0],{FirstName:e.registration.FirstName})])})
return console.log("\n\n\n POSTS:CREATE",{retState:A},{action:r},{initialState:s}),A
default:return console.log("\n\n\n default",{initialState:s}),e||s}}Object.defineProperty(e,"__esModule",{value:!0}),e.filterPosts=void 0,e.default=a
var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]
for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},l=r.default.createSelector,s={filter:void 0,all:void 0,users:[{UserName:"user1"},{UserName:"user2",Password:"pass123"},{UserName:"user3",Password:"pass123",FirstName:"Joe"}],loggedInUser:{},registration:{UserName:"",Password:"",FirstName:""}},d=function(e){return e.posts.all},u=function(e){return e.posts.filter}
e.filterPosts=l(d,u,function(e,r){return t.default.omitBy(e,function(e){return void 0!==r&&e.author!==r})})}),define("reddit/resolver",["exports","ember-resolver"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=t.default}),define("reddit/router",["exports","reddit/config/environment"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0})
var r=Ember.Router.extend({location:t.default.locationType,rootURL:t.default.rootURL})
r.map(function(){this.route("posts",{path:"/"})}),e.default=r}),define("reddit/routes/posts",["exports","fetch","ember-redux"],function(e,t,r){Object.defineProperty(e,"__esModule",{value:!0})
var n=function(e){return(0,t.default)("https://www.reddit.com/r/emberjs.json").then(function(e){return e.json()}).then(function(t){return e({type:"POSTS:FETCH_API",payload:t})})}
e.default=(0,r.route)({model:n})()}),define("reddit/services/ajax",["exports","ember-ajax/services/ajax"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.default}})}),define("reddit/services/redux",["exports","ember-redux/services/redux","reddit/reducers/index","reddit/enhancers/index","reddit/middleware/index"],function(e,t,r,n,i){Object.defineProperty(e,"__esModule",{value:!0}),e.default=t.default.extend({reducers:r.default,enhancers:n.default,middlewares:i.default})}),define("reddit/templates/application",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=Ember.HTMLBars.template({id:"ZWMCVwlp",block:'{"symbols":[],"statements":[[1,[18,"outlet"],false],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"reddit/templates/application.hbs"}})}),define("reddit/templates/components/ui-layout",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=Ember.HTMLBars.template({id:"JZ7WmM3H",block:'{"symbols":["&default"],"statements":[[11,1,[[19,0,["posts"]],[19,0,["filter"]],[19,0,["registration"]],[19,0,["users"]],[19,0,["loggedInUser"]],[25,"action",[[19,0,[]],"filterWith"],null],[25,"action",[[19,0,[]],"registrationAction"],null],[25,"action",[[19,0,[]],"registrationNewAction"],null],[25,"action",[[19,0,[]],"registrationLogInAction"],null],[25,"action",[[19,0,[]],"creatProfile"],null]]],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"reddit/templates/components/ui-layout.hbs"}})}),define("reddit/templates/posts",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=Ember.HTMLBars.template({id:"UjNoIs6l",block:'{"symbols":["posts","filter","registration","users","loggedInUser","filterWith","registrationAction","registrationNewAction","registrationLogInAction","creatProfile","u"],"statements":[[4,"ui-layout",null,[["class"],["container"]],{"statements":[[2,""],[0,"\\n"],[1,[25,"log",["posts",[19,1,[]]],null],false],[0,"\\n"],[2,""],[0,"\\n"],[1,[25,"log",["registration hbs",[19,3,[]]],null],false],[0,"\\n"],[2,""],[0,"\\n"],[1,[25,"log",["users",[19,4,[]]],null],false],[0,"\\n"],[2,""],[0,"\\n"],[1,[25,"log",["registrationNewAction",[19,8,[]]],null],false],[0,"\\n"],[2,""],[0,"\\n"],[1,[25,"log",["registrationLogInAction",[19,9,[]]],null],false],[0,"\\n\\n"],[6,"h1"],[7],[0,"Prospect Source"],[8],[0,"\\n"],[6,"input"],[9,"id","UserName"],[9,"placeholder","UserName"],[10,"value",[19,3,["UserName"]],null],[10,"oninput",[25,"action",[[19,0,[]],[19,7,[]]],null],null],[7],[8],[0,"\\n"],[6,"h1"],[7],[1,[19,3,["UserName"]],false],[8],[0,"\\n\\n"],[6,"input"],[9,"id","Password"],[9,"placeholder","Password"],[10,"value",[19,3,["Password"]],null],[10,"oninput",[25,"action",[[19,0,[]],[19,7,[]]],null],null],[7],[8],[0,"\\n"],[6,"h1"],[7],[1,[19,3,["Password"]],false],[8],[0,"\\n\\n"],[6,"button"],[10,"onclick",[25,"action",[[19,0,[]],[19,9,[]]],null],null],[7],[0,"Prospect Login"],[8],[0,"\\n"],[6,"br"],[7],[8],[0,"\\n"],[6,"button"],[10,"onclick",[25,"action",[[19,0,[]],[19,8,[]]],null],null],[7],[0,"Register"],[8],[0,"\\n"],[6,"br"],[7],[8],[0,"\\n"],[6,"br"],[7],[8],[0,"\\n"],[6,"br"],[7],[8],[0,"\\n\\n"],[6,"br"],[7],[8],[0,"\\n"],[6,"hr"],[7],[8],[0,"\\n"],[6,"h1"],[7],[0,"Users"],[8],[0,"\\n"],[6,"table"],[9,"style","width:100%"],[7],[0,"\\n  "],[6,"tr"],[7],[0,"\\n    "],[6,"th"],[7],[0,"UserName"],[8],[0,"\\n    "],[6,"th"],[7],[0,"Password"],[8],[0,"\\n    "],[6,"th"],[7],[0,"First Name"],[8],[0,"\\n  "],[8],[0,"\\n"],[4,"each",[[19,4,[]]],null,{"statements":[[0,"  "],[6,"tr"],[7],[0,"\\n    "],[6,"td"],[7],[1,[19,11,["UserName"]],false],[8],[0,"\\n    "],[6,"td"],[7],[1,[19,11,["Password"]],false],[8],[0,"\\n    "],[6,"td"],[7],[1,[19,11,["FirstName"]],false],[8],[0,"\\n  "],[8],[0,"\\n"]],"parameters":[11]},null],[8],[0,"\\n"],[6,"h1"],[7],[0,"Logged In User: "],[1,[19,5,["UserName"]],false],[8],[0,"\\n"],[6,"br"],[7],[8],[0,"\\n"],[6,"hr"],[7],[8],[0,"\\n"],[6,"h4"],[7],[0,"Create Prospect Profile: "],[1,[19,5,["UserName"]],false],[8],[0,"\\n"],[6,"input"],[9,"id","FirstName"],[9,"placeholder","FirstName"],[10,"value",[19,3,["FirstName"]],null],[10,"oninput",[25,"action",[[19,0,[]],[19,7,[]]],null],null],[7],[8],[0,"\\n"],[6,"h1"],[7],[1,[19,3,["FirstName"]],false],[8],[0,"\\n"],[6,"button"],[10,"onclick",[25,"action",[[19,0,[]],[19,10,[]]],null],null],[7],[0,"Create"],[8],[0,"\\n\\n"]],"parameters":[1,2,3,4,5,6,7,8,9,10]},null]],"hasEval":false}',meta:{moduleName:"reddit/templates/posts.hbs"}})}),define("reddit/config/environment",["ember"],function(e){try{var t="reddit/config/environment",r=document.querySelector('meta[name="'+t+'"]').getAttribute("content"),n=JSON.parse(unescape(r)),i={default:n}
return Object.defineProperty(i,"__esModule",{value:!0}),i}catch(e){throw new Error('Could not read config from meta tag with name "'+t+'".')}}),runningTests||require("reddit/app").default.create({name:"reddit",version:"0.0.0+0c2b5c43"})
